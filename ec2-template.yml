AWSTemplateFormatVersion: 2010-09-09
Description: >
  DSA Template
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Tech Day Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    ParameterLabels:
      QSS3BucketName:
        default: Tech Day S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix

Parameters:
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Description: Update to where you hold the scripts. S3 bucket name for the Tech Day assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Description: Update to where you hold the scripts. S3 bucket name for the Tech Day assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  AllowIP:
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
  DSMSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
  DSMFQDN:
    Type: String
  day1CertBucket:
    Type: String
    Description: cert in bucket name
  day1CertBucketARN:
    Type: String
    Description: cert in bucket arn

Mappings:
  #Amazon Linux 2 arm 
  AMZN:
    us-east-1:
      AMZN: ami-0d296d66f22f256c2
    us-west-2:
      AMZN: ami-04071714ae6bc5aa7
    us-east-2:
      AMZN: ami-0950ad18d0a34dadc

Resources:
  DSASecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
        GroupDescription: "DSA Security Group"
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: dsaSecGroup
  SGBaseIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DSASecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !Ref DSMSecurityGroupID
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
        GroupDescription: "Web Security Group"
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: webSecGroup
  WebAppSGBaseIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref WebSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 0
      CidrIp: !Ref AllowIP

  DSAkeysRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      Policies:
      - PolicyName: DeepSecurityAgentS3cpPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject*
            Resource: 
              - Ref: day1CertBucketARN
              - Fn::Join:
                - ""
                - - Ref: day1CertBucketARN
                  - /*

  DSAkeysProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref DSAkeysRole

  PubDSA1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref DSAkeysProfile
      ImageId:
        !FindInMap
        - AMZN
        - !Ref AWS::Region
        - AMZN
      InstanceType: t4g.large
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - Ref: DSASecurityGroup
            - Ref: WebSecurityGroup
          SubnetId:
            Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value: PubDSA
      - Key: PlayerSsmAccess
        Value: "true"
      - Key: WSchallenge
        Value: forScoreCheck
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            download(){  
            until curl -f $@ ; 
            do
            sleep 1
            done
            }
            echo ${DSMFQDN} > /opt/DSMFQDN
            download -o /opt/dsa.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}workload_security/day1/dsa.sh
            chmod +x /opt/dsa.sh
            sleep 120
            until curl -vk https://${DSMFQDN}:443/rest/status/manager/current/ping; do echo \"manager not started yet\" >> /tmp/4-check-service; sleep 30; done
            /opt/dsa.sh >> /opt/dsa_install.log
            DSAHost=`curl http://169.254.169.254/latest/meta-data/public-hostname`
            echo "[nginx-stable]" >> /etc/yum.repos.d/nginx.repo
            echo "name=nginx stable repo" >> /etc/yum.repos.d/nginx.repo
            echo "baseurl=http://nginx.org/packages/amzn2/\$releasever/\$basearch/" >> /etc/yum.repos.d/nginx.repo
            echo "gpgcheck=1" >> /etc/yum.repos.d/nginx.repo
            echo "enabled=1" >> /etc/yum.repos.d/nginx.repo
            echo "gpgkey=https://nginx.org/keys/nginx_signing.key" >> /etc/yum.repos.d/nginx.repo
            echo "module_hotfixes=true" >> /etc/yum.repos.d/nginx.repo
            yum install -y nginx php php-fpm
            systemctl start nginx
            systemctl enable nginx
            mkdir /etc/nginx/ssl
            openssl genrsa -aes128 -passout pass:c1ws -out /etc/nginx/ssl/server.key 2048
            openssl rsa -passin pass:c1ws -in /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.key
            openssl req -new -key /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.csr -subj "/C=US/ST=NorthVirginia/O=example/CN=$DSAHost"
            echo subjectAltName=DNS:$DSAHost > san.ext
            openssl x509 -extfile san.ext -req -days 3650 -signkey /etc/nginx/ssl/server.key -in /etc/nginx/ssl/server.csr -out /etc/nginx/ssl/server.crt
            mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.back
            echo "server {" >> /etc/nginx/conf.d/ssl.conf
            echo "    listen              443 ssl;" >> /etc/nginx/conf.d/ssl.conf
            echo "    listen              11000 ssl;" >> /etc/nginx/conf.d/ssl.conf
            echo "    server_name         $DSAHost;" >> /etc/nginx/conf.d/ssl.conf
            echo "    location / {" >> /etc/nginx/conf.d/ssl.conf
            echo "        root   /usr/share/nginx/html;" >> /etc/nginx/conf.d/ssl.conf
            echo "        index  index.html index.htm;" >> /etc/nginx/conf.d/ssl.conf
            echo "    }" >> /etc/nginx/conf.d/ssl.conf
            echo "    ssl_certificate     /etc/nginx/ssl/server.crt;" >> /etc/nginx/conf.d/ssl.conf
            echo "    ssl_certificate_key /etc/nginx/ssl/server.key;" >> /etc/nginx/conf.d/ssl.conf
            echo "    ssl_protocols       TLSv1.2 TLSv1.3;" >> /etc/nginx/conf.d/ssl.conf
            echo "    ssl_prefer_server_ciphers on;" >> /etc/nginx/conf.d/ssl.conf
            echo "    ssl_ciphers ECDHE+AESGCM:DHE+aRSA+AESGCM:ECDHE+AESCCM:DHE+aRSA+AESCCM:+AES256:ECDHE+CHACHA20:DHE+aRSA+CHACHA20:+DHE:ECDHE+AES128:ECDHE+CAMELLIA128:ECDHE+AES:ECDHE+CAMELLIA:+ECDHE+SHA:DHE+aRSA+AES128:DHE+aRSA+CAMELLIA128:DHE+aRSA+AES:DHE+aRSA+CAMELLIA:+DHE+aRSA+SHA;" >> /etc/nginx/conf.d/ssl.conf
            echo "    ssl_conf_command Ciphersuites TLS_RSA_WITH_AES_128_CBC_SHA256:TLS_AES_128_GCM_SHA256:TLS_AES_128_CCM_SHA256:TLS_AES_128_CCM_8_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;" >> /etc/nginx/conf.d/ssl.conf
            echo "    root /usr/share/nginx/scripts;" >> /etc/nginx/conf.d/ssl.conf
            echo "    index index.html index.htm;" >> /etc/nginx/conf.d/ssl.conf
            echo "    location ~ \.php$ {" >> /etc/nginx/conf.d/ssl.conf
            echo "        root           /usr/share/nginx/html;" >> /etc/nginx/conf.d/ssl.conf
            echo "        fastcgi_pass   127.0.0.1:9000;" >> /etc/nginx/conf.d/ssl.conf
            echo "        fastcgi_index  index.php;" >> /etc/nginx/conf.d/ssl.conf
            echo '        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;' >> /etc/nginx/conf.d/ssl.conf
            echo "        include        fastcgi_params;" >> /etc/nginx/conf.d/ssl.conf
            echo "    }" >> /etc/nginx/conf.d/ssl.conf
            echo "}" >> /etc/nginx/conf.d/ssl.conf
            sed -i -e "/^user = apache/c\user = nginx" /etc/php-fpm.d/www.conf
            sed -i -e "/^group = apache/c\group = nginx" /etc/php-fpm.d/www.conf
            systemctl restart nginx
            systemctl start php-fpm.service
            systemctl enable php-fpm.service
            cp /etc/nginx/ssl/server.crt /opt/server.crt
            cp /etc/nginx/ssl/server.key /opt/server.key
            openssl x509 -in /opt/server.crt > /opt/server.pem
            cat /opt/server.key >> /opt/server.pem
            aws s3 cp /opt/server.crt s3://${day1CertBucket}/day1/lambda/server.crt
            aws s3 cp /opt/server.pem s3://${day1CertBucket}/day1/user/server.pem
            chown nginx:nginx /usr/share/nginx/html/index.html
            echo "This site is Hijacked!!" > /usr/share/nginx/html/hijack.html
            echo "This site is Secure." > /usr/share/nginx/html/secure.html
            (crontab -l; echo " */10 * * * * cp -f /usr/share/nginx/html/secure.html /usr/share/nginx/html/index.html > /dev/null 2>&1") | crontab -
            mkdir /usr/share/nginx/html/scripts
            echo '<?php print("It is dummy page...?"); copy("/usr/share/nginx/html/hijack.html","/usr/share/nginx/html/index.html"); ?>' > /usr/share/nginx/html/scripts/backdoor.php
            download -o /usr/share/nginx/html/scripts/repair.php https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}workload_security/day1/repair.php

Outputs:
  HTTPSsite:
    Description: PubDSA protected https site dsn name.
    Value: !Sub https://${PubDSA1.PublicDnsName}
  pemfileS3DownloadLink:
    Description: Certificate download Link at S3.
    Value: !Sub https://${day1CertBucket}.s3.amazonaws.com/day1/user/server.pem
  PubDSADNSNName:
    Description: PubDSA'S Public DNS name for score Lambda day1task3
    Value: !GetAtt PubDSA1.PublicDnsName
