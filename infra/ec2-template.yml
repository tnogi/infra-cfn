AWSTemplateFormatVersion: 2010-09-09
# MongoDB EOL info: https://www.mongodb.com/legal/support-policy/lifecycles
# MongoDB 5.0: October 2024
# Rocky Linux EOL info: https://endoflife.date/rocky-linux
# 8: 01 May 2021 (Security Support: 31 May 2024)
# Ref: https://www.hopes.host/blog/mongodb-install

# MongoDB operation
# > use admin
# switched to db admin
# >  db.createUser({user:"mongo", pwd:"password", roles:["root"]})
# Successfully added user: { "user" : "mongo", "roles" : [ "root" ] } 
# Ref: https://qiita.com/moyuu/items/7ce1dd3e2db5b37abb54

# MongoDB Backup
# https://qiita.com/bohebohechan/items/8904bb626399d40f4bb3

# Restrice Source IP
# https://www.mongodb.com/ja-jp/docs/manual/reference/program/mongod/#std-option-mongod.--bind_ip

Parameters:
  AllowIP:
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
  InstanceType:
    Type: String
    Default: t2.large
  VPCCIDR:
    Type: String
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      RockyLinux8: ami-0c15e602d3d6c6c4a
    ap-northeast-1:
      RockyLinux8: ami-07f63d80296cfee44

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "MongoDB Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: 27017
          ToPort: 27017
          CidrIp: !Ref VPCCIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  MongoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: /

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref MongoDBRole

  MongoDB:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - RockyLinux8
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - Ref: SecurityGroup
          SubnetId:
            Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value: MongoDB
      - Key: Name
        Value: test
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/usr/bin/env bash

            if [ $(uname -m) = "x86_64" ]; then
                SSM_AGENT_URL='https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm'
                AWS_CLI_URL='https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip'

            elif [ $(uname -m) = "aarch64" ]; then
                SSM_AGENT_URL='https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_arm64/amazon-ssm-agent.rpm'
                AWS_CLI_URL='https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip'

            else
            	  echo "no match machine hardware name"
            	  exit 1
            fi

            ## ssm agent install
            dnf install -y ${!SSM_AGENT_URL}

            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

            ## aws cli install
            yum remove awscli
            dnf install -y zip unzip
            cd /var/tmp
            curl ${!AWS_CLI_URL} -o "awscliv2.zip"

            unzip awscliv2.zip
            ./aws/install
            echo 'export PATH=$PATH:/usr/local/bin' >> ~/.bashrc

            # Install MongoDB
            echo "[mongodb-org-5.0]" >> /etc/yum.repos.d/mongodb-org-5.0.repo 
            echo "name=MongoDB Repository" >> /etc/yum.repos.d/mongodb-org-5.0.repo 
            echo "baseurl=https://repo.mongodb.org/yum/redhat/8/mongodb-org/5.0/x86_64/" >> /etc/yum.repos.d/mongodb-org-5.0.repo 
            echo "gpgcheck=1" >> /etc/yum.repos.d/mongodb-org-5.0.repo 
            echo "enabled=1" >> /etc/yum.repos.d/mongodb-org-5.0.repo 
            echo "gpgkey=https://pgp.mongodb.com/server-5.0.asc" >> /etc/yum.repos.d/mongodb-org-5.0.repo 
            yum install -y mongodb-org
            sed -i s/127.0.0.1/0.0.0.0/g /etc/mongod.conf
            systemctl start mongod
            systemctl enable mongod

            cd /tmp

            curl https://rufuspollock.github.io/s3-bucket-listing/index.html -o index.html
            aws s3 cp ./index.html s3://${!BUCKET_NAME}

            # Backup MongoDB and store to S3
            mkdir ./bkup
            echo "BUCKET_NAME=${BucketName}" >> /tmp/bkup/bkup.sh
            echo "BUCKET_PATH=${BucketPath}" >> /tmp/bkup/bkup.sh
            echo "LIMIT=5" >> /tmp/bkup/bkup.sh
            echo "BACKUP_FILE=`date +"%Y%m%d-%H%M%S".dump`" >> /tmp/bkup/bkup.sh
            echo "BACKUP_DIR=/tmp/bkup" >> /tmp/bkup/bkup.sh
            echo "sudo chmod 755 /tmp/bkup/bkup.sh" >> /tmp/bkup/bkup.sh
            echo "LOG=${!BACKUP_DIR}/${!BACKUP_FILE}.log" >> /tmp/bkup/bkup.sh
            echo "sudo mongodump -o ${!BACKUP_DIR}/${!BACKUP_FILE} 2>&1 | tee -a $LOG" >> /tmp/bkup/bkup.sh
            echo "sudo tar cvzf ${!BACKUP_DIR}/${!BACKUP_FILE}.tar.gz ${!BACKUP_DIR}/${!BACKUP_FILE} 2>&1 | tee  -a $LOG" >> /tmp/bkup/bkup.sh
            echo "sudo rm  -rf ${!BACKUP_DIR}/${!BACKUP_FILE}" >> /tmp/bkup/bkup.sh
            echo "sudo rm  -rf ${!BACKUP_DIR}/${!BACKUP_FILE}.log" >> /tmp/bkup/bkup.sh
            echo "aws s3 cp ${!BACKUP_DIR}/${!BACKUP_FILE}.tar.gz s3://${!BUCKET_NAME}/${!BUCKET_PATH}/" >> /tmp/bkup/bkup.sh
            echo "file_count=`ls -1 | grep dump.tar.gz | wc -l`" >> /tmp/bkup/bkup.sh
            echo "file_name=`ls -1 | grep dump.tar.gz | head -1`" >> /tmp/bkup/bkup.sh
            echo "if [ $file_count -gt $LIMIT ]" >> /tmp/bkup/bkup.sh
            echo "then" >> /tmp/bkup/bkup.sh
            echo "    aws s3 rm s3://${!BUCKET_NAME}/${!BUCKET_PATH}/${!file_name}" >> /tmp/bkup/bkup.sh
            echo "    sudo rm -rf `ls -1 | grep dump.tar.gz | head -1 | xargs rm -rf`" >> /tmp/bkup/bkup.sh
            echo "fi" >> /tmp/bkup/bkup.sh
            
            echo '*/5 * * * * /bin/bash /tmp/bkup/bkup.sh 2>&1' > cron.conf
            crontab cron.conf

            grubby --update-kernel ALL --args selinux=0
            reboot
          - BucketName: !Ref BackupStoreBucket
            BucketPath: backup

  BackupStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  BackupStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BackupStoreBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:GetBucketLocation
            Resource: 
              - !Sub arn:aws:s3:::${BackupStoreBucket}
              - !Sub arn:aws:s3:::${BackupStoreBucket}/*

Outputs:
  MongoDBPublicIp:
    Description: MongoDB's public Ip address
    Value: !GetAtt MongoDB.PublicIp
  BackupS3Url:
    Description: Backup stored S3 link
    Value: !Sub 'https://${BackupStoreBucket.DomainName}'
